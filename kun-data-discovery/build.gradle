plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "io.freefair.lombok" version "5.1.0"
    id "org.sonarqube" version "3.3"
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task buildDataQualityOperator(type: Exec) {
    workingDir "../"
    commandLine "./gradlew", ":kun-data-quality:data-quality-operators:shadowJar"
}

task copyDataQualityOperator(type: Copy) {
    from "../kun-data-quality/data-quality-operators/build/libs/data-quality-operator-0.1.jar"
    rename {
        "data-quality-operator.jar"
    }
    into "src/main/resources"
    dependsOn(buildDataQualityOperator)
}

compileJava.dependsOn(copyDataQualityOperator)

task deleteLocalJar(type: Delete) {
    delete "src/main/resources/data-quality-operator.jar"
}
bootJar.dependsOn(deleteLocalJar)

jar {
    enabled = true
}

dependencies {
    implementation project(':kun-workflow:kun-workflow-client')
    implementation project(':kun-workflow:kun-workflow-core')
    implementation project(':kun-workflow:kun-workflow-utils')
    implementation project(':kun-metadata:kun-metadata-core')
    implementation project(':kun-commons:kun-commons-db')
    implementation project(':kun-commons:kun-commons-utils')
    implementation project(":kun-commons:kun-commons-pubsub")
    implementation project(':kun-app-common')
    implementation project(':kun-security:kun-security-common')
    implementation project(':kun-security:kun-security-facade')
    implementation project(':kun-data-platform:kun-data-platform-facade')
    implementation project(':kun-operation-record:kun-operation-record-common')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.postgresql:postgresql'
    implementation 'com.googlecode.json-simple:json-simple'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.google.code.gson:gson'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-ui'
    runtimeOnly 'io.grpc:grpc-netty-shaded'
    implementation 'io.grpc:grpc-protobuf'
    implementation 'io.grpc:grpc-stub'
    implementation 'org.apache.commons:commons-csv'
    implementation "com.amazonaws:aws-java-sdk-glue"
    implementation "com.amazonaws:aws-java-sdk-s3"
    implementation group: 'org.apache.poi', name: 'poi'
    implementation group: 'org.apache.poi', name: 'poi-ooxml'
    implementation 'io.projectreactor:reactor-core'
    implementation 'io.lettuce:lettuce-core'
    implementation 'org.apache.parquet:parquet-hadoop:1.12.3'
    implementation 'org.apache.parquet:parquet-column'
    implementation 'org.jodd:jodd-core'
    implementation 'joda-time:joda-time'
    implementation 'org.apache.spark:spark-sql_2.11:2.4.8'
    implementation("org.apache.hive:hive-common:2.2.0") {
        exclude group: 'org.eclipse.jetty.aggregate', module: 'jetty-all'
        exclude group: 'org.eclipse.jetty.orbit', module: 'javax.servlet'
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    implementation("org.apache.hadoop:hadoop-common:2.7.3") {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }

    testImplementation project(':kun-commons:kun-commons-testing')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test:3.4.21'
}

jacocoTestReport {

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/**operator.jar'])
        }))
    }
}

test {
    useJUnitPlatform()
}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.projectKey", "miotech_kun-scheduler"
        property "sonar.organization", "miotech"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "src/main"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "build"
    }
}