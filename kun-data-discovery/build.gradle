plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "io.freefair.lombok" version "5.1.0"
	id "org.sonarqube" version "3.3"
	id "com.gorylenko.gradle-git-properties" version "2.2.3"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task buildDataQualityOperator (type:Exec){
	workingDir "../"
	commandLine "./gradlew",":kun-data-quality:data-quality-operators:shadowJar"
}

task copyDataQualityOperator(type: Copy){
	from "../kun-data-quality/data-quality-operators/build/libs/data-quality-operator-0.1.jar"
	rename {
		"data-quality-operator.jar"
	}
	into "src/main/resources"
	dependsOn(buildDataQualityOperator)
}

compileJava.dependsOn(copyDataQualityOperator)

task deleteLocalJar(type: Delete){
	delete "src/main/resources/data-quality-operator.jar"
}
bootJar.dependsOn(deleteLocalJar)

jar {
	enabled = true
}

dependencies {
	implementation project(':kun-workflow:kun-workflow-client')
	implementation project(':kun-workflow:kun-workflow-core')
	implementation project(':kun-workflow:kun-workflow-utils')
	implementation project(':kun-metadata:kun-metadata-core')
	implementation project(':kun-commons:kun-commons-db')
	implementation project(':kun-commons:kun-commons-utils')
	implementation project(':kun-app-common')
	implementation project(':kun-security:kun-security-common')
	implementation project(':kun-data-platform:kun-data-platform-facade')

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.postgresql:postgresql'
	implementation 'com.googlecode.json-simple:json-simple'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'com.google.code.gson:gson'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springdoc:springdoc-openapi-ui'

	testImplementation project(':kun-commons:kun-commons-testing')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

jacocoTestReport {

	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/**operator.jar'])
		}))
	}
}

test {
	useJUnitPlatform()
}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
		property "sonar.projectKey", "miotech_kun-scheduler"
		property "sonar.organization", "miotech"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sourceEncoding", "src/main"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.java.binaries", "build"
    }
}